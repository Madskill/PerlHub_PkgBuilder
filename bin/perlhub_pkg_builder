#!/usr/bin/perl

use qbit;

use Getopt::Long;
use Proc::Daemon;
use Sys::Syslog qw(:standard :macros);
use LWP::Simple;
use LWP::UserAgent;
use HTTP::Request::Common;
use File::Temp qw(tempdir);
use File::Path qw(make_path remove_tree);
use Archive::Tar;
use Digest::MD5 qw(md5_hex);

my $PERLHUB_URL   = 'http://perlhub.ru';
my $BASE_TGZ_PATH = '/var/cache/perlhub_pkg_builder';

local $Archive::Tar::WARN = FALSE;

my %ARCH_SERIES_2_BASE_TGZ;

sub run_cmd {
    my ($cmd, $params) = @_;

    my $log = '';
    $cmd = join(' ', $cmd, @$params);

    $log = "$cmd\n";
    syslog(LOG_INFO, '%s', $cmd);

    open(my $fh, "$cmd 2>&1|") || throw "Cannot run `$cmd`: $!";
    while (<$fh>) {
        syslog(LOG_INFO, '    %s', $_);
        $log .= "    $_";
    }
    close($fh);

    return $log;
}

openlog($0, 'pid', LOG_USER);

make_path($BASE_TGZ_PATH) || throw "Cannot create dir '$BASE_TGZ_PATH': $!" unless -d $BASE_TGZ_PATH;

my $json = get("$PERLHUB_URL/api/get_builder_settings") // throw 'Cannot get builder settings';
my $bulder_settings = from_json($json) // throw 'Cannot parse builder settings';
my $base_tgz_suffix = md5_hex(join('|', @{$bulder_settings->{'components'}}, @{$bulder_settings->{'othermirrors'}}));

my %args = ();
GetOptions(\%args, 'daemonize!', 'workers=i', 'pid=s');

if ($args{'daemonize'}) {
    my $daemon = Proc::Daemon->new(pid_file => $args{'pid'});
    $daemon->Init();
}

my @PIDS;
foreach my $series (@{$bulder_settings->{'series'}}) {
    foreach my $arch (grep {$_ ne 'all'} @{$bulder_settings->{'arches'}}) {
        my $base_tgz_fn = $ARCH_SERIES_2_BASE_TGZ{$series, $arch} =
          "$BASE_TGZ_PATH/base_${series}_${arch}_${base_tgz_suffix}.tgz";

        unless (-e $base_tgz_fn && [stat($base_tgz_fn)]->[7]) {
            my $pid = fork();
            if ($pid > 0) {
                push(@PIDS, $pid);
            } elsif ($pid == 0) {
                run_cmd(
                    '/usr/sbin/pbuilder',
                    [
                        '--create',
                        '--basetgz'     => $base_tgz_fn,
                        '--buildplace'  => $BASE_TGZ_PATH,
                        '--othermirror' => "'" . join(
                            '|',
                            map {
                                my $tmp = $_;
                                $tmp =~ s/\Q{{SERIES}}\E/$series/g;
                                $tmp =~ s/\Q{{ARCH}}\E/$arch/g;
                                $tmp;
                              } @{$bulder_settings->{'othermirrors'}}
                          )
                          . "'",
                        '--distribution' => $series,
                        '--architecture' => $arch,
                        '--components'   => "'" . join(' ', @{$bulder_settings->{'components'}}) . "'",
                    ]
                );
                exit(0);
            } else {
                throw "Cannot fork: $!";
            }
        }
    }
}

waitpid($_, 0) foreach @PIDS;

my $base_tgzs_ok = TRUE;
foreach my $series (@{$bulder_settings->{'series'}}) {
    foreach my $arch (grep {$_ ne 'all'} @{$bulder_settings->{'arches'}}) {
        my $base_tgz_fn = $ARCH_SERIES_2_BASE_TGZ{$series, $arch} =
          "$BASE_TGZ_PATH/base_${series}_${arch}_${base_tgz_suffix}.tgz";

        unless (-e $base_tgz_fn && [stat($base_tgz_fn)]->[7]) {
            l "$base_tgz_fn wasn't create";
            $base_tgzs_ok = FALSE;
        }
    }
}

exit(1) unless $base_tgzs_ok;

@PIDS = ();

$SIG{'QUIT'} = $SIG{'KILL'} = $SIG{'TERM'} = sub {
    kill('KILL', $_) foreach @PIDS;
};

for (1 .. $args{'workers'} || 4) {
    my $pid = fork();

    if ($pid > 0) {
        push(@PIDS, $pid);
    } elsif ($pid == 0) {
        while (TRUE) {
            try {
                my $json = get("$PERLHUB_URL/api/get_build_task");
                my $task;
                $task = from_json($json) if $json && $json =~ /^\{/;

                #ldump({$$ => $task});

                unless ($task) {
                    sleep(int(rand(30)) + 30);
                    return;
                }

                $task->{'build_dir'} = tempdir(CLEANUP => TRUE);
                $task->{'build_arch_name'} = $task->{'arch_name'} eq 'all' ? 'i386' : $task->{'arch_name'};

                my $source_arc_fn = $task->{'source_arc_url'};
                $source_arc_fn =~ s/.+\///;

                my $ua  = LWP::UserAgent->new();
                my $req = HTTP::Request->new(GET => $task->{'source_arc_url'});
                my $res = $ua->request($req, "$task->{'build_dir'}/$source_arc_fn");
                throw "Cannot download source archive '$task->{'source_arc_url'}': " . $res->status_line
                  unless $res->is_success;

                my $tar = Archive::Tar->new("$task->{'build_dir'}/$source_arc_fn", TRUE);

                chdir($task->{'build_dir'});
                $tar->extract();

                my ($debian_dir) = sort {length($a) <=> length($b)} grep {s{debian/changelog$}{}} $tar->list_files();

                undef($tar);
                chdir($debian_dir) if $debian_dir;

                my $change_log = readfile('debian/changelog');
                $change_log =~ s/^([^\)]+\) )[^;]+(;.+)$/$1$task->{'series_name'}$2/m;
                writefile('debian/changelog', $change_log);

                my $log = run_cmd(
                    '/usr/sbin/pbuilder',
                    [
                        '--update',
                        '--basetgz'    => $ARCH_SERIES_2_BASE_TGZ{$task->{'series_name'}, $task->{'build_arch_name'}},
                        '--buildplace' => $BASE_TGZ_PATH,
                    ]
                );

                $log .= run_cmd(
                    '/usr/bin/pdebuild',
                    [
                        '--buildresult' => "$task->{'build_dir'}/result",
                        '--',
                        '--basetgz' => $ARCH_SERIES_2_BASE_TGZ{$task->{'series_name'}, $task->{'build_arch_name'}}
                          // throw "Unknown series/arch: $task->{'series_name'}/$task->{'build_arch_name'}",
                        '--buildplace' => $BASE_TGZ_PATH,
                        '--allow-untrusted',
                    ]
                );

                my @files;
                if (opendir(my $dh, "$task->{'build_dir'}/result")) {
                    @files = grep {!/^\./} readdir($dh);
                    closedir $dh;
                }

                if (@files) {
                    $ua->request(
                        POST(
                            "$PERLHUB_URL/api/complete_build_task",
                            Content_Type => 'form-data',
                            Content      => [
                                build_log => $log,
                                (map {$_ => $task->{$_}} qw(source_id arch_name series_name)),
                                (map {(file => ["$task->{'build_dir'}/result/$_"])} @files)
                            ]
                        )
                    );
                } else {
                    $ua->request(
                        POST(
                            "$PERLHUB_URL/api/fail_build_task",
                            Content_Type => 'form-data',
                            Content      => [
                                build_log => $log,
                                (map {$_ => $task->{$_}} qw(source_id arch_name series_name)),
                            ]
                        )
                    );
                }

                chdir($BASE_TGZ_PATH);    # To delete build dir
            }
            catch {
                l shift->message();
            };
        }
        exit(0);
    } else {
        throw "Cannot fork: $!";
    }
}

waitpid($_, 0) foreach @PIDS;
